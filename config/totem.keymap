//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#include "zmk-helpers/helper.h"
// Source desired key-position labels
#include "zmk-helpers/key-labels/totem.h"


#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH0 LH1 LH2 RH0 RH1 RH2

&mt {
    quick-tap-ms = <175>;
    flavor = "balanced";
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    hold-trigger-on-release;
};

//             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
//             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
//             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
//             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
// ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
// ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
// ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
//                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
//                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
ZMK_LAYER(default,
            &kp Q         &kp W         &kp F          &kp P          &kp B        &kp J        &kp L            &kp U          &kp Y         &kp SEMI
            &hrml LGUI A  &hrml LALT R  &hrml LCTRL S  &hrml LSHFT T  &kp G        &kp M        &hrmr RSHFT N    &hrmr RCTRL E  &hrmr RALT I  &hrmr RGUI O
&kp ESCAPE  &lt 7 Z       &kp X         &kp C          &kp D          &kp V        &kp K        &kp H            &kp COMMA      &kp DOT       &lt 7 FSLH    &kp SINGLE_QUOTE
                                        &rus           &lt 2 SPACE    &lt 5 TAB    &lt 4 ENTER  &lt 3 BACKSPACE  &lt 6 DELETE
)

ZMK_LAYER(rus,
            &kp Q         &kp W         &kp E          &kp R          &kp T        &kp Y        &kp U            &kp I          &kp O         &kp P
            &hrml LGUI A  &hrml LALT S  &hrml LCTRL D  &hrml LSHFT F  &kp G        &kp H        &hrmr RSHFT J    &hrmr RCTRL K  &hrmr RALT L  &hrmr RGUI SEMICOLON
&kp ESCAPE  &kp Z         &kp X         &kp C          &kp V          &kp B        &kp N        &kp M            &kp COMMA      &kp DOT       &kp FSLH              &kp SQT
                                        &eng           &lt 2 SPACE    &lt 5 TAB    &lt 4 ENTER  &lt 3 BACKSPACE  &lt 6 DELETE
)
ZMK_LAYER(nav,
        &none         &none         &none          &none      &none    &kp K_REDO    &kp K_PASTE     &kp K_COPY     &kp K_CUT     &kp K_UNDO
        &kp LEFT_WIN  &kp LEFT_ALT  &kp RA(LCTRL)  &kp LSHFT  &none    &kp CAPSLOCK  &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT
&trans  &none         &none         &none          &none      &none    &kp INSERT    &kp HOME        &kp PAGE_DOWN  &kp PG_UP     &kp END     &none
                                    &none          &none      &none    &kp ENTER     &kp BACKSPACE   &kp DELETE
)
ZMK_LAYER(num,
        &kp LEFT_BRACKET  &kp N7  &kp N8      &kp N9        &kp RIGHT_BRACKET    &none  &none      &none      &none     &none
        &kp SEMICOLON     &kp N4  &kp N5      &kp NUMBER_6  &kp EQUAL            &none  &kp RSHFT  &kp RCTRL  &kp LALT  &kp LGUI
&trans  &kp GRAVE         &kp N1  &kp N2      &kp NUMBER_3  &kp BACKSLASH        &none  &none      &none      &none     &none     &none
                                  &kp PERIOD  &kp N0        &kp MINUS            &none  &none      &none
)
ZMK_LAYER(sym,
        &kp LEFT_BRACE  &kp AMPS    &kp ASTRK             &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &none  &none      &none      &none          &none
        &kp COLON       &kp DOLLAR  &kp PERCENT           &kp CARET              &kp PLUS           &none  &kp RSHFT  &kp RCTRL  &kp RIGHT_ALT  &kp RGUI
&trans  &kp TILDE       &kp EXCL    &kp AT                &kp HASH               &kp PIPE           &none  &none      &none      &none          &none     &trans
)
ZMK_LAYER(med,
       &none     &none     &none      &none      &none    &none       &none             &none         &none            &none
       &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &none    &none       &kp C_PREV        &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_NEXT
&none  &none     &none     &none      &none      &none    &bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &none
                           &none      &none      &none    &kp C_STOP  &kp C_PLAY_PAUSE  &kp K_MUTE
)
ZMK_LAYER(fun,
       &kp F12  &kp F7  &kp F8      &kp F9     &kp PRINTSCREEN    &none  &none      &none      &none     &none
       &kp F11  &kp F4  &kp F5      &kp F6     &kp SCROLLLOCK     &none  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&none  &kp F10  &kp F1  &kp F2      &kp F3     &kp PAUSE_BREAK    &none  &none      &none      &none     &none     &none
                        &kp K_MENU  &kp SPACE  &kp TAB            &none  &none      &none
)
ZMK_LAYER(but,
        &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO
        &kp LGUI    &kp LALT   &kp LCTRL   &kp LSHFT    &none         &none       &kp RSHFT    &kp RCTRL   &kp RALT   &kp RGUI
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO  &none
                               &none       &none        &none         &none       &none        &none
)
/ {
    combos {
        compatible = "zmk,combos";

        esc_c {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        ent_c {
            bindings = <&kp ENTER>;
            key-positions = <2 3>;
        };

        at_c {
            bindings = <&kp AT>;
            key-positions = <11 1>;
        };

        hash_c {
            bindings = <&kp HASH>;
            key-positions = <12 2>;
        };

        dollar_c {
            bindings = <&kp DOLLAR>;
            key-positions = <13 3>;
        };

        percent_c {
            bindings = <&kp PERCENT>;
            key-positions = <14 4>;
        };

        tab_c {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        grave_c {
            bindings = <&kp GRAVE>;
            key-positions = <11 22>;
        };

        bslsh_c {
            bindings = <&kp BSLH>;
            key-positions = <23 12>;
        };

        eql_c {
            bindings = <&kp EQUAL>;
            key-positions = <13 24>;
        };

        tild_c {
            bindings = <&kp TILDE>;
            key-positions = <14 25>;
        };

        copy_c {
            bindings = <&kp K_COPY>;
            key-positions = <22 23>;
        };

        paste_c {
            bindings = <&kp K_PASTE>;
            key-positions = <23 24>;
        };

        caret_c {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
        };

        under_c {
            bindings = <&kp UNDER>;
            key-positions = <15 26>;
        };

        plus_c {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
        };

        minus_c {
            bindings = <&kp MINUS>;
            key-positions = <16 27>;
        };

        bspc_c {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
        };

        del_c {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
        };

        aster_c {
            bindings = <&kp ASTERISK>;
            key-positions = <7 17>;
        };

        slash_c {
            bindings = <&kp SLASH>;
            key-positions = <17 28>;
        };

        amp_c {
            bindings = <&kp AMPS>;
            key-positions = <8 18>;
        };

        pipe_c {
            bindings = <&kp PIPE>;
            key-positions = <29 18>;
        };

        lpar_c {
            bindings = <&left_par>;
            key-positions = <16 17>;
        };

        rpar_c {
            bindings = <&right_par>;
            key-positions = <17 18>;
        };

        lbr_c {
            bindings = <&left_br>;
            key-positions = <27 28>;
        };

        rbr_c {
            bindings = <&right_br>;
            key-positions = <28 29>;
        };
    };

    macros {
        rus: rus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RG(SPACE) &to 1>;
            label = "RUS";
        };

        eng: eng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &to 0>;
            label = "ENG";
        };
    };

    behaviors {
        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <35 36 37 34 32 33 5 6 7 8 9 15 16 17 18 19 26 27 28 29 31 30>;
        };

        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HRMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <35 36 37 34 32 33 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25>;
        };

        left_par: left_par {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_PAR";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        right_par: right_par {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_PAR";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        left_br: left_br {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BR";
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        right_br: right_br {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BR";
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
    };
};
